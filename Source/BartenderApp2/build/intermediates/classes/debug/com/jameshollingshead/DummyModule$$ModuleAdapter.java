// Code generated by dagger-compiler.  Do not edit.
package com.jameshollingshead;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DummyModule$$ModuleAdapter extends ModuleAdapter<DummyModule> {
  private static final String[] INJECTS = { "members/com.jameshollingshead.DeckardActivity", "members/com.jameshollingshead.DeckardApplication", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DummyModule$$ModuleAdapter() {
    super(com.jameshollingshead.DummyModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public DummyModule newModule() {
    return new com.jameshollingshead.DummyModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DummyModule module) {
    bindings.contributeProvidesBinding("com.jameshollingshead.Foo", new ProvideFooProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.jameshollingshead.Foo>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.jameshollingshead.Foo>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFooProvidesAdapter extends ProvidesBinding<Foo>
      implements Provider<Foo> {
    private final DummyModule module;

    public ProvideFooProvidesAdapter(DummyModule module) {
      super("com.jameshollingshead.Foo", NOT_SINGLETON, "com.jameshollingshead.DummyModule", "provideFoo");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jameshollingshead.Foo>}.
     */
    @Override
    public Foo get() {
      return module.provideFoo();
    }
  }
}
