// Code generated by dagger-compiler.  Do not edit.
package com.jameshollingshead;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DummyModule$$ModuleAdapter extends ModuleAdapter<DummyModule> {
  private static final String[] INJECTS = { "members/com.jameshollingshead.activity.DeckardActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DummyModule$$ModuleAdapter() {
    super(com.jameshollingshead.DummyModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DummyModule module) {
    bindings.contributeProvidesBinding("android.app.Application", new ProvideApplicationContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.lang.String", new ProvidesInjectedFooProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.app.Application>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Application>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationContextProvidesAdapter extends ProvidesBinding<android.app.Application>
      implements Provider<android.app.Application> {
    private final DummyModule module;

    public ProvideApplicationContextProvidesAdapter(DummyModule module) {
      super("android.app.Application", IS_SINGLETON, "com.jameshollingshead.DummyModule", "provideApplicationContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Application>}.
     */
    @Override
    public android.app.Application get() {
      return module.provideApplicationContext();
    }
  }

  /**
   * A {@code Binding<java.lang.String>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.lang.String>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesInjectedFooProvidesAdapter extends ProvidesBinding<String>
      implements Provider<String> {
    private final DummyModule module;

    public ProvidesInjectedFooProvidesAdapter(DummyModule module) {
      super("java.lang.String", NOT_SINGLETON, "com.jameshollingshead.DummyModule", "providesInjectedFoo");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.String>}.
     */
    @Override
    public String get() {
      return module.providesInjectedFoo();
    }
  }
}
